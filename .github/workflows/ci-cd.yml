name: CI/CD Pipeline

on:
  push:
    branches: [ build-docker, main ]
  pull_request:
    branches: [ build-docker, main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: taiphamdac/3d_stedy
  SERVER_HOST: 64.23.206.54
  SERVER_USERNAME: root
  SERVER_PASSWORD: ${{ secrets.PASSWORD }}
  API_DOMAIN: http://137.184.13.30:3000
  API_URL: /graphql

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Create production environment file
        run: |
          cat > .env.production << EOL
          NODE_ENV=production
          VITE_NAME_ENV=production
          VITE_PUBLIC_API_URL="${{ env.API_URL }}"
          VITE_PUBLIC_API_DOMAIN="${{ env.API_DOMAIN }}"
          
          VITE_FIREBASE_API_KEY=AIzaSyDXPMaIAIR30BjUU0MEGDXixeIZssyBQm8
          VITE_FIREBASE_AUTH_DOMAIN=apis-cores.firebaseapp.com
          VITE_FIREBASE_PROJECT_ID=apis-cores
          VITE_FIREBASE_STORAGE_BUCKET=apis-cores.firebasestorage.app
          VITE_FIREBASE_MESSAGING_SENDER_ID=797424777511
          VITE_FIREBASE_APP_ID=1:797424777511:web:a1ccd2880f4e8c9aa49102
          VITE_FIREBASE_VAPID_KEY=BO0fue6rke8-zGDRnI_mhL6pilCwYTu6tZ-KGGdegqIZAJ32GKcLx8pXTDH56hoKOEZsQKxpdODNcfg-3_eYV_c
          EOL

      - name: Build application
        run: npm run build

      # Only deploy when pushing to main or build-docker branches, not on PRs
      - name: Set up Docker Buildx
        if: github.event_name == 'push' && (github.ref == 'refs/heads/build-docker' || github.ref == 'refs/heads/main')
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push' && (github.ref == 'refs/heads/build-docker' || github.ref == 'refs/heads/main')
        uses: docker/login-action@v3
        with:
          username: taiphamdac
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/build-docker' || github.ref == 'refs/heads/main')
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VITE_PUBLIC_API_DOMAIN=${{ env.API_DOMAIN }}
            VITE_PUBLIC_API_URL=${{ env.API_URL }}

      - name: Deploy to server
        if: github.event_name == 'push' && (github.ref == 'refs/heads/build-docker' || github.ref == 'refs/heads/main')
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script_stop: true
          script: |
            # Create directory if it doesn't exist
            mkdir -p /var/www/3d_stedy
            # Pull latest image
            docker pull ${{ env.IMAGE_NAME }}:latest
            # Backup current deployment
            if [ -d "/var/www/3d_stedy" ]; then
              tar -czf /var/www/3d_stedy_backup_$(date +%Y%m%d_%H%M%S).tar.gz /var/www/3d_stedy
            fi
            # Update deployment
            cd /var/www/3d_stedy
            # Copy configuration files
            cat > nginx.production.conf << 'EOL'
            server {
                listen 3000;
                server_name _;  # Accept all hostnames

                # Root directory for static files
                root /app/dist;

                # Compression
                gzip on;
                gzip_comp_level 6;
                gzip_vary on;
                gzip_min_length 1000;
                gzip_proxied any;
                gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
                gzip_buffers 16 8k;

                # Proxy settings for all API requests
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_cache_bypass $http_upgrade;
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
                
                # CORS settings
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

                # GraphQL API endpoint
                location /graphql {
                    if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Max-Age' 1728000;
                        add_header 'Content-Type' 'text/plain charset=UTF-8';
                        add_header 'Content-Length' 0;
                        return 204;
                    }
                    proxy_pass http://137.184.13.30:3000/graphql;
                }

                # Auth endpoint
                location /auth {
                    if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Max-Age' 1728000;
                        add_header 'Content-Type' 'text/plain charset=UTF-8';
                        add_header 'Content-Length' 0;
                        return 204;
                    }
                    proxy_pass http://137.184.13.30:3000/auth;
                    proxy_method $request_method;
                }

                # Caching for static assets
                location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg)$ {
                    expires 1y;
                    add_header Cache-Control "public, max-age=31536000, immutable";
                    try_files $uri =404;
                }

                # Health check endpoint
                location /health {
                    return 200 'OK';
                    add_header Content-Type text/plain;
                }

                # API catchall
                location /api/ {
                    if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Max-Age' 1728000;
                        add_header 'Content-Type' 'text/plain charset=UTF-8';
                        add_header 'Content-Length' 0;
                        return 204;
                    }
                    proxy_pass http://137.184.13.30:3000/;
                }

                # All other requests go to the static build
                location / {
                    try_files $uri $uri/ /index.html;
                    auth_basic off;
                    satisfy any;
                }

                # Error handling
                error_page 404 /index.html;
                error_page 403 /index.html;
                error_page 500 502 503 504 /index.html;

                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header Content-Security-Policy "default-src * 'self' 'unsafe-inline' 'unsafe-eval' data: blob:" always;
            }
            EOL

            # Create docker-compose.yml
            cat > docker-compose.yml << 'EOL'
            version: '3'
            services:
              app:
                image: ${{ env.IMAGE_NAME }}:latest
                ports:
                  - "3000:3000"
                restart: always
                environment:
                  - NODE_ENV=production
                  - VITE_PUBLIC_API_DOMAIN=http://137.184.13.30:3000
                  - VITE_PUBLIC_API_URL=/graphql
                  - PORT=3000
                  - HOST=0.0.0.0
                volumes:
                  - ./nginx.production.conf:/etc/nginx/conf.d/default.conf
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
                networks:
                  - app_network
            networks:
              app_network:
                driver: bridge
            EOL

            # Stop and remove existing containers
            docker-compose down || true
            # Clean up unused resources
            docker system prune -f
            # Start the new deployment
            docker-compose up -d
            # Wait for container to start
            echo "Waiting for container to start..."
            sleep 30
            # Check container status
            if ! docker ps | grep -q "3d_stedy-app-1"; then
              echo "Container failed to start"
              docker-compose logs
              exit 1
            fi
            # Health check
            echo "Checking container health..."
            for i in {1..20}; do
              if curl -f http://localhost:3000/health; then
                echo "Health check passed!"
                break
              fi
              if [ $i -eq 20 ]; then
                echo "Health check failed"
                docker-compose logs
                exit 1
              fi
              echo "Waiting for service to be ready... ($i/20)"
              sleep 5
            done 