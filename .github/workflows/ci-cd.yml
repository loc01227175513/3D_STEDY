name: CI/CD Pipeline

on:
  push:
    branches: [ build-docker, main ]
  pull_request:
    branches: [ build-docker, main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: taiphamdac/3d_stedy
  SERVER_HOST: 64.23.206.54
  SERVER_USERNAME: root
  API_DOMAIN: http://137.184.13.30:3000
  API_URL: /graphql

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

  build-test-deploy:
    needs: lint-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/build-docker' || github.ref == 'refs/heads/main')
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Create production environment file
        run: |
          cat > .env.production << "EOL"
          NODE_ENV=production
          VITE_NAME_ENV=production
          VITE_PUBLIC_API_URL="${{ env.API_URL }}"
          VITE_PUBLIC_API_DOMAIN="${{ env.API_DOMAIN }}"
          EOL

      - name: Build application
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: taiphamdac
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script_stop: true
          script: |
            # Pull latest image
            docker pull ${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove existing containers
            docker-compose down -v --remove-orphans || true
            docker system prune -f
            
            # Start the new deployment
            docker-compose up -d
            
            # Wait for container to start
            echo "Waiting for container to start..."
            sleep 30
            
            # Check container health
            CONTAINER_ID=$(docker ps -q --filter "name=app")
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_ID)
            if [[ "$STATUS" != "healthy" ]]; then
              echo "Health check failed"
              docker logs $CONTAINER_ID
              exit 1
            fi
            echo "Deployment successful!"
